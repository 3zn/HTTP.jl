function _precompile_1()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Base.Enums.enum_argument_error, (Symbol, UInt8,))
    precompile(Base.string, (Char, String,))
    precompile(Base.copy!, (Array{UInt8, 1}, Int64, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64,))
    precompile(Base.collect_to!, (Array{Char, 1}, Base.Generator{Array{UInt8, 1}, Type{Char}}, Int64, Int64,))
    precompile(Base.string, (Char, String,))
    precompile(Base.Dates.format, (Base.Dates.DateTime, Base.Dates.DateFormat,))
    precompile(Base.ht_keyindex, (Base.Dict{Int64, String}, Int32,))
    precompile(Base.replace, (String, Char, Char, Int64,))
    precompile(Base.hex, (UInt64, Int64, Bool,))
    precompile(Base.close, (Base.AbstractIOBuffer{Array{UInt8, 1}},))
    precompile(Base.ht_keyindex, (Base.Dict{UInt8, Void}, UInt8,))
    precompile(Base.ht_keyindex, (Base.Dict{String, String}, String,))
    precompile(Base.uv_write, (Base.TCPSocket, Ptr{UInt8}, UInt64,))
    precompile(Base.Dates.year, (Int64,))
    precompile(Base.write, (Base.AbstractIOBuffer{Array{UInt8, 1}}, String, String,))
    precompile(Base.getsockname, (Base.TCPSocket,))
    precompile(Base.typed_vcat, (Type{Any}, Array{Base.Dates.Period, 1}, Array{Any, 1},))
    precompile(Base.map, (typeof( Base.lowercase), Base.SubString{String},))
    precompile(Base.findnext, (Base.SubString{String}, Char, Int64,))
    precompile(Base.resize!, (Array{Base.IPAddr, 1}, Int64,))
    precompile(Base._jl_spawn, (String, Array{String, 1}, Ptr{Void}, Base.Process, Base.PipeEndpoint, Base.TTY, Base.TTY,))
    precompile(Base.Libc.Type, (Type{Base.Libc.TimeVal},))
    precompile(Base.rehash!, (Base.Dict{String, Any}, Int64,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}},))
    precompile(Base.skip_deleted, (Base.Dict{String, Any}, Int64,))
    precompile(Base.Base64.b64, (UInt8, UInt8, UInt8,))
    precompile(Base.Serializer.should_send_whole_type, (Base.Serializer.SerializationState{Base.Pipe}, DataType,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}},))
    precompile(Base.task_done_hook, (Task,))
    precompile(Base.tryparse_internal, (Type{UInt8}, String, Int64, Int64, Int64, Bool,))
    precompile(Base.Test.get_test_counts, (Base.Test.DefaultTestSet,))
    precompile(Base.read_sub, (Base.AbstractIOBuffer{Array{UInt8, 1}}, Array{UInt8, 1}, Int64, Int64,))
    precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Tuple{Int64},))
    precompile(Base._delete!, (Base.Dict{String, String}, Int64,))
    precompile(Base.accept_nonblock, (Base.TCPServer, Base.TCPSocket,))
    precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Array{Any, 1},))
    precompile(Base.ht_keyindex, (Base.Dict{String, Base.Dict{Int64, String}}, String,))
    precompile(Base.open, (Base.CmdRedirect, String, Base.TTY,))
    precompile(Base.ht_keyindex, (Base.Dict{String, Base.Dict{String, Int64}}, String,))
    precompile(Base.Type, (Type{Base.Process}, Base.Cmd, Ptr{Void}, Base.Pipe, Base.TTY, Base.TTY,))
    precompile(Base.write, (Base.Pipe, Array{UInt8, 1},))
    precompile(Base.Test.print_counts, (Base.Test.DefaultTestSet, Int64, Int64, Int64, Int64, Int64, Int64, Int64,))
    precompile(Base.Serializer.serialize_cycle, (Base.Serializer.SerializationState{Base.Pipe}, TypeName,))
    precompile(Base.push!, (Array{String, 1}, Base.SubString{String},))
    precompile(Base.isreadable, (Base.TCPSocket,))
    precompile(Base.Test.get_testset, ())
    precompile(Base.Dates.month, (Int64,))
    precompile(Base.Base64.write, (Base.Base64.Base64EncodePipe, UInt8,))
    precompile(Base.Test.testset_beginend, (Tuple{String, Expr}, Expr,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Tuple{Base.Pair{String, String}},))
    precompile(Base.Broadcast._bcs1, (Base.OneTo{Int64}, Base.OneTo{Int64},))
    precompile(Base.ht_keyindex, (Base.Dict{Int64, String}, Int64,))
    precompile(Base.Type, (Type{Base.Dict{String, Any}}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}},))
    precompile(Base.gcd, (Int64, Int64,))
    precompile(Base.Dates.day, (Int64,))
    precompile(Base.Test.do_test, (Base.Test.Returned, Expr,))
    precompile(Base.Sort.sort!, (Array{Base.Dates.Period, 1}, Int64, Int64, Base.Sort.InsertionSortAlg, Base.Order.ReverseOrdering{Base.Order.Lt{typeof(Base.Dates.periodisless)}},))
    precompile(Base.Test.pop_testset, ())
    precompile(Base.notify, (Base.Condition, Array{UInt8, 1}, Bool, Bool,))
    precompile(Base._setindex!, (Base.Dict{String, Any}, Array{String, 1}, String, Int64,))
    precompile(Base.Type, (Type{Base.IPv4}, UInt8, UInt8, UInt8, UInt8,))
    precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Tuple{Symbol, UInt64},))
    precompile(Base.connect!, (Base.TCPSocket, Base.IPv4, Int64,))
    precompile(Base.write, (Base.TTY, Symbol,))
    precompile(Base.unpreserve_handle, (Base.Timer,))
    precompile(Base.notify, (Base.Condition, Base.IPv4, Bool, Bool,))
    precompile(Base.Dates.Type, (Type{Base.Dates.DateTime},))
    precompile(Base.arg_gen, (String, String,))
    precompile(Base.hash, (Base.SubString{String}, UInt64,))
    precompile(Base.ht_keyindex, (Base.Dict{Symbol, DataType}, Symbol,))
    precompile(Base.reset, (Base.AbstractIOBuffer{Array{UInt8, 1}},))
    precompile(Base.show, (Base.AbstractIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Float64},))
    precompile(Base.startswith, (Base.SubString{String}, String,))
    precompile(Base.Test.get_alignment, (Base.Test.DefaultTestSet, Int64,))
    precompile(Base.notify, (Base.Condition, Base.Test.Pass, Bool, Bool,))
    precompile(Base.getindex, (Type{UInt8}, UInt8, UInt8, UInt8, UInt8,))
    precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, SimpleVector,))
    precompile(Base.close, (Base.TCPSocket,))
    precompile(Base.Test.finish, (Base.Test.DefaultTestSet,))
    precompile(Base.show, (Base.AbstractIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Int64},))
    precompile(Base.Serializer.serialize_type, (Base.Serializer.SerializationState{Base.Pipe}, DataType,))
    precompile(Base.with_output_color, (Function, Symbol, Base.TTY, String,))
    precompile(Base._setindex!, (Base.Dict{String, Any}, String, String, Int64,))
    precompile(Base.sizehint!, (Base.Dict{String, String}, Int64,))
    precompile(Base.Type, (Type{Base.IOContext{Base.TTY}}, Base.TTY, Base.ImmutableDict{Symbol, Any},))
    precompile(Base.show, (Base.AbstractIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Bool},))
    precompile(Base.Sort.sort!, (Array{Base.Dates.Period, 1}, Int64, Int64, Base.Sort.MergeSortAlg, Base.Order.ReverseOrdering{Base.Order.Lt{typeof(Base.Dates.periodisless)}}, Array{Base.Dates.Period, 1},))
    precompile(Base.notify, (Base.Condition, Base.EOFError, Bool, Bool,))
    precompile(Base.Broadcast._broadcast!, ())
    precompile(Base.Dates.second, (Base.Dates.DateTime,))
    precompile(Base.Test.do_test, (Base.Test.Returned, Symbol,))
    precompile(Base.vect, (Tuple{String, Array{UInt8, 1}, String},))
    precompile(Base.merge!, (Base.Dict{String, String}, Base.Dict{String, String},))
    precompile(Base.Dates.minute, (Base.Dates.DateTime,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base.print, (Base.TTY, DataType, String,))
    precompile(Base.write, (Base.AbstractIOBuffer{Array{UInt8, 1}}, Char, Char, Char,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Int64,))
    precompile(Base.Dates.hour, (Base.Dates.DateTime,))
    precompile(Base.write, (Base.AbstractIOBuffer{Array{UInt8, 1}}, String, Char, String,))
    precompile(Base.notify_filled, (Base.TCPSocket, Int64,))
    precompile(Base.show, (Base.TTY, Module,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base.readbytes!, (Base.TCPSocket, Array{UInt8, 1}, Int64,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base.push!, (Array{Base.Dates.Period, 1}, Base.Dates.Day,))
    precompile(Base.flush, (Base.TCPSocket,))
    precompile(Base.Test.get_test_result, (Symbol,))
    precompile(Base.Serializer.serialize_typename, (Base.Serializer.SerializationState{Base.Pipe}, TypeName,))
    precompile(Base.alloc_buf_hook, (Base.TCPSocket, UInt64,))
    precompile(Base.Serializer.serialize_mod_names, (Base.Serializer.SerializationState{Base.Pipe}, Module,))
    precompile(Base.interrupt, (Int64,))
    precompile(Base.uvfinalize, (Base.TCPServer,))
    precompile(Base.Broadcast.check_broadcast_shape, (Tuple{Base.OneTo{Int64}}, Tuple{Base.OneTo{Int64}},))
    precompile(Base.unsafe_write, (Base.Pipe, Base.RefValue{UInt64}, Int64,))
    precompile(Base.Serializer.serialize_any, (Base.Serializer.SerializationState{Base.Pipe}, Any,))
    precompile(Base.push!, (Array{Base.Dates.Period, 1}, Base.Dates.Year,))
    precompile(Base.print, (Base.TTY, String, Char,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base.indexed_next, (Tuple{Symbol, Array{UInt8, 1}}, Int64, Int64,))
    precompile(Base.vect, (Tuple{String, Array{String, 1}},))
    precompile(Base.Test.push_testset, (Base.Test.DefaultTestSet,))
    precompile(Base.finalizer, (Any, Any,))
    precompile(Base.print, (Base.TTY, Module, Char,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base.pop!, (Array{Base.Test.AbstractTestSet, 1},))
    precompile(Base.print, (Base.TTY, String, String,))
    precompile(Base.finalizer, (Any, Any,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base.Test.parse_testset_args, (Tuple{String},))
    precompile(Base.write, (Base.AbstractIOBuffer{Array{UInt8, 1}}, Char, Char, Char,))
    precompile(Base.vect, (UInt8,))
    precompile(Base.Order.ord, (typeof( Base.Dates.periodisless),typeof( Base.identity), Bool, Base.Order.ForwardOrdering,))
    precompile(Base.push!, (Array{Base.Test.AbstractTestSet, 1}, Base.Test.DefaultTestSet,))
    precompile(Base.print, (Base.AbstractIOBuffer{Array{UInt8, 1}}, String, Int32,))
    precompile(Base.Libc.Type, (Type{Base.Libc.TmStruct}, Int64,))
    precompile(Base.Test.eval_comparison, (Expr,))
    precompile(Base.uvfinalize, (Base.PipeEndpoint,))
    precompile(Base.write, (Base.AbstractIOBuffer{Array{UInt8, 1}}, String, String, String,))
    precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Bool,))
    precompile(Base.Base64.b64, (UInt8, UInt8,))
    precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Array{String, 1},))
    precompile(Base._uv_hook_close, (Base.TCPServer,))
    precompile(Base.print, (Base.TTY, DataType,))
    precompile(Base.getindex, (Type{UInt8}, Char, Char, Char, UInt8,))
    precompile(Base.push!, (Array{Base.Dates.Period, 1}, Base.Dates.Second,))
    precompile(Base.indexed_next, (Tuple{Symbol, Base.AbstractIOBuffer{Array{UInt8, 1}}}, Int64, Int64,))
    precompile(Base.indexed_next, (Tuple{Symbol, Float64}, Int64, Int64,))
    precompile(Base.getindex, (Type{UInt8}, Char, Char, Char, Char,))
    precompile(Base.accept, (Base.TCPServer, Base.TCPSocket,))
    precompile(Base.uvfinalize, (Base.TCPSocket,))
    precompile(Base.Dates.Type, (Type{Base.Dates.Day}, String,))
    precompile(Base.push!, (Array{Base.Dates.Period, 1}, Base.Dates.Minute,))
    precompile(Base.push!, (Array{Base.Dates.Period, 1}, Base.Dates.Month,))
    precompile(Base._uv_hook_close, (Base.TCPSocket,))
    precompile(Base.getindex, (Type{UInt8}, Int64, Int64, Int64,))
    precompile(Base.stop_reading, (Base.TCPSocket,))
    precompile(Base.isempty, (Array{Base.Test.AbstractTestSet, 1},))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String},))
    precompile(Base._uv_hook_close, (Base.Process,))
    precompile(Base.push!, (Array{Base.Dates.Period, 1}, Base.Dates.Hour,))
    precompile(Base.ndigits, (Int64,))
    precompile(Base.Dates.Type, (Type{Base.Dates.DateTime}, Base.Dates.Year, Base.Dates.Month, Base.Dates.Day, Base.Dates.Hour, Base.Dates.Minute, Base.Dates.Second,))
    precompile(Base.Serializer.serialize_type_data, (Base.Serializer.SerializationState{Base.Pipe}, DataType, Bool,))
    precompile(Base.uvfinalize, (Base.Process,))
    precompile(Base.exponent_bias, (Type{Float64},))
    precompile(Base.indexed_next, (Base.Pair{String, Array{String, 1}}, Int64, Int64,))
    precompile(Base.indexed_next, (Tuple{Symbol, Base.Dates.DateTime}, Int64, Int64,))
    precompile(Base.Test.record, (Base.Test.DefaultTestSet, Base.Test.Pass,))
    precompile(Base.Dates.Type, (Type{Base.Dates.Minute}, String,))
    precompile(Base.significand_bits, (Type{Float64},))
    precompile(Base.disassociate_julia_struct, (Base.Timer,))
    precompile(Base.indexed_next, (Tuple{Symbol, Base.IOStream}, Int64, Int64,))
    precompile(Base.print_with_color, (Symbol, Base.TTY, String,))
    precompile(Base.show_datatype, (Base.TTY, DataType,))
    precompile(Base.get, (Base.TTY, Symbol, Bool,))
    precompile(Base.Test.record, (Base.Test.DefaultTestSet, Base.Test.DefaultTestSet,))
    precompile(Base.get, (Base.Nullable{Int64}, Int64,))
    precompile(Base.arg_gen, (Base.Cmd,))
    precompile(Base.start_reading, (Base.TCPSocket,))
    precompile(Base.Type, (Type{Base.Pair}, Symbol, Int64,))
    precompile(Base.search, (String, String,))
    precompile(Base.Dates.Type, (Type{Base.Dates.Hour}, String,))
    precompile(Base.spawn_opts_swallow, (Tuple{Base.Pipe, Base.TTY, Base.TTY},))
    precompile(Base.Dates.Type, (Type{Base.Dates.Year}, String,))
    precompile(Base.indexed_next, (Tuple{Symbol, Base.Dict{String, String}}, Int64, Int64,))
    precompile(Base.getindex, (Tuple{Array{Any, 1}, Tuple{}}, Int64,))
    precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Any,))
    precompile(Base.string, (String, Base.IPv4,))
    precompile(Base.Type, (Type{Base.Pair}, Symbol, Float64,))
    precompile(Base.convert, (Type{Base.Dates.DateTime}, Base.Dates.DateTime,))
    precompile(Base.redir_err, (Base.Cmd, Base.TTY,))
    precompile(Base.Dates.Type, (Type{Base.Dates.Second}, String,))
    precompile(Base.Test.Type, (Type{Base.Test.DefaultTestSet}, String,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base.Base64.base64encode, (Function, String,))
    precompile(Base.length, (Array{Base.Test.AbstractTestSet, 1},))
    precompile(Base.getindex, (Array{Base.Test.AbstractTestSet, 1}, Int64,))
    precompile(Base.Test.record, (Base.Test.FallbackTestSet, Base.Test.Pass,))
    precompile(Base.endof, (Array{Base.Test.AbstractTestSet, 1},))
    precompile(Base.collect, (Base.Generator{Array{UInt8, 1}, Type{Char}},))
    precompile(Base.Dates.now, ())
    precompile(Base.parse, (Type{UInt8}, String, Int64,))
    precompile(Base.Base64.close, (Base.Base64.Base64EncodePipe,))
    precompile(Base.Base64.b64, (UInt8,))
    precompile(Base.print, (Base.TTY, Symbol,))
    precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Module,))
    precompile(Base.Order.Type, (Type{Base.Order.ReverseOrdering}, Base.Order.Lt{typeof(Base.Dates.periodisless)},))
    precompile(Base.exponent_bits, (Type{Float64},))
    precompile(Base.print, (Base.TTY, Module,))
    precompile(Base.wait_readnb, (Base.TCPSocket, Int64,))
    precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, Array{UInt8, 1},))
    precompile(Base.remove_linenums!, (Float64,))
    precompile(Base.Type, (Type{Base.Rational{Int64}}, Int64, Int64,))
    precompile(Base.Sort.sort!, (Array{Base.Dates.Period, 1}, Base.Sort.MergeSortAlg, Base.Order.ReverseOrdering{Base.Order.Lt{typeof(Base.Dates.periodisless)}},))
    precompile(Base.ht_keyindex2, (Base.Dict{String, Any}, String,))
    precompile(Base.print, (Base.AbstractIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Int64},))
    precompile(Base.print, (Base.AbstractIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Float64},))
    precompile(Base.print, (Base.AbstractIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Bool},))
    precompile(Base.remove_linenums!, (Char,))
    precompile(Base.remove_linenums!, (QuoteNode,))
    precompile(Base.remove_linenums!, (UInt8,))
    precompile(Base.unsafe_write, (Base.TCPSocket, Ptr{UInt8}, UInt64,))
    precompile(Base.unsafe_write, (Base.Base64.Base64EncodePipe, Ptr{UInt8}, UInt64,))
    precompile(Base.Type, (Type{Array{UInt8, 1}}, String,))
    precompile(Base.Type, (Type{Base.IPv4}, Int64, Int64, Int64, Int64,))
    precompile(Base.readavailable, (Base.TCPSocket,))
    precompile(Base.remove_linenums!, (String,))
    precompile(Base.show, (Base.TTY, TypeName,))
    precompile(Base._uv_hook_close, (Base.Timer,))
    precompile(Base.setindex!, (Base.Dict{String, Any}, Array{String, 1}, String,))
    precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, TypeName,))
    precompile(Base.setindex!, (Base.Dict{String, Any}, String, String,))
    precompile(Base.readbytes!, (Base.AbstractIOBuffer{Array{UInt8, 1}}, Array{UInt8, 1}, Int64,))
    precompile(Base.accept, (Base.TCPServer,))
    precompile(Base.write, (Base.Base64.Base64EncodePipe, Array{UInt8, 1},))
    precompile(Base.Serializer.serialize_array_data, (Base.Pipe, Array{UInt8, 1},))
    precompile(Base.connect, (Base.IPv4, Int64,))
    precompile(Base.getindex, (Tuple{Symbol}, Base.UnitRange{Int64},))
    precompile(Base.readbytes!, (Base.TCPSocket, Array{UInt8, 1}, UInt64,))
    precompile(Base.write, (Base.TCPSocket, Array{UInt8, 1},))
    precompile(Base.write, (Base.Pipe, UInt64,))
    precompile(Base.in, (String, Tuple{String, String, String},))
    precompile(Base.Serializer.serialize, (Base.Serializer.SerializationState{Base.Pipe}, DataType,))
    precompile(Base.write, (Base.Base64.Base64EncodePipe, String,))
    precompile(Base.show, (Base.TTY, DataType,))
end
