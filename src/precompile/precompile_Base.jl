function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Base.sync_end, (typeof(Base.sync_end),))
    precompile(Base.show_unquoted_quote_expr, (typeof(Base.show_unquoted_quote_expr), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol, Int64, Int64,))
    precompile(Base.map, (typeof(Base.map), typeof(Base.lowercase), Base.SubString{String},))
    precompile(Base.ht_keyindex, (typeof(Base.ht_keyindex), Base.Dict{String, Int64}, String,))
    precompile(Base.print, (typeof(Base.print), String,))
    precompile(Base.Test.do_test, (typeof(Base.Test.do_test), Base.Test.Returned, Symbol,))
    precompile(Base.Test.eval_test, (typeof(Base.Test.eval_test), Expr, Expr,))
    precompile(Base.Test.get_test_result, (typeof(Base.Test.get_test_result), Expr,))
    precompile(Base.typejoin, (typeof(Base.typejoin), DataType, Any,))
    precompile(Base.string, (typeof(Base.string), Char, String, Char,))
    precompile(Base.println, (typeof(Base.println), String,))
    precompile(Base.tryparse_internal, (typeof(Base.tryparse_internal), Type{Int64}, String, Int64, Int64, Int64, Bool,))
    precompile(Base.Filesystem.tempname, (typeof(Base.Filesystem.tempname),))
    precompile(Base.typejoin, (typeof(Base.typejoin), Any, DataType,))
    precompile(Base.hex, (typeof(Base.hex), UInt128, Int64, Bool,))
    precompile(Base.close, (typeof(Base.close), Base.GenericIOBuffer{Array{UInt8, 1}},))
    precompile(Base.string, (typeof(Base.string), String, String, String,))
    precompile(Base.rehash!, (typeof(Base.rehash!), Base.Dict{String, Any}, Int64,))
    precompile(Base.copy_to_bitarray_chunks!, (typeof(Base.copy_to_bitarray_chunks!), Array{UInt64, 1}, Int64, Array{Bool, 1}, Int64, Int64,))
    precompile(Base.indexed_next, (typeof(Base.indexed_next), Base.Pair{String, Base.IOStream}, Int64, Int64,))
    precompile(Base.task_done_hook, (typeof(Base.task_done_hook), Task,))
    precompile(Base.string, (typeof(Base.string), Char, Char,))
    precompile(Base.tryparse_internal, (typeof(Base.tryparse_internal), Type{UInt8}, String, Int64, Int64, Int64, Bool,))
    precompile(Base.getindex, (typeof(Base.getindex), Array{Base.IPAddr, 1}, Int64,))
    precompile(Base.delete!, (typeof(Base.delete!), Base.Dict{String, String}, String,))
    precompile(Base.Test.Type, (Type{Base.Test.Returned}, Void, Void,))
    precompile(Base.string, (typeof(Base.string), Char, String,))
    precompile(Base.Test.testset_beginend, (typeof(Base.Test.testset_beginend), Tuple{String, Expr}, Expr,))
    precompile(Base.string, (typeof(Base.string), String, String,))
    precompile(Base.Test.get_alignment, (typeof(Base.Test.get_alignment), Base.Test.DefaultTestSet, Int64,))
    precompile(Base.getindex, (typeof(Base.getindex), Tuple{Symbol}, Base.UnitRange{Int64},))
    precompile(Base.Dates.now, (typeof(Base.Dates.now), Type{Base.Dates.UTC},))
    precompile(Base.error, (typeof(Base.error), String, Int32,))
    precompile(Base._jl_spawn, (typeof(Base._jl_spawn), String, Array{String, 1}, Ptr{Void}, Base.Process, Base.PipeEndpoint, Base.TTY, Base.TTY,))
    precompile(Base.Dates.format, (typeof(Base.Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dates.DatePart{Char(0x00000073)}, Base.Dates.DateTime,))
    precompile(Base.copy!, (typeof(Base.copy!), Array{Any, 1}, Int64, Array{Base.Test.Error, 1}, Int64, Int64,))
    precompile(Base.accept, (typeof(Base.accept), Base.TCPServer,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Tuple{Base.Pair{String, String}},))
    precompile(Base.Base64.close, (typeof(Base.close), Base.Base64.Base64EncodePipe,))
    precompile(Base.Cartesian.lreplace!, (typeof(Base.Cartesian.lreplace!), String, Base.Cartesian.LReplace{String},))
    precompile(Base.replace_new, (typeof(Base.replace_new), String, Char, Char, Int64,))
    precompile(Base.Test.print_test_results, (typeof(Base.Test.print_test_results), Base.Test.DefaultTestSet, Int64,))
    precompile(Base.copy!, (typeof(Base.copy!), Array{UInt8, 1}, Int64, Base.SubArray{UInt8, 1, Array{UInt8, 1}, Tuple{Base.UnitRange{Int64}}, true}, Int64, Int64,))
    precompile(Base.Cartesian.exprresolve_arith, (typeof(Base.Cartesian.exprresolve_arith), Expr,))
    precompile(Base.connect, (typeof(Base.connect), Base.TCPSocket, Base.IPv4, Int64,))
    precompile(Base.Cartesian.lreplace!, (typeof(Base.Cartesian.lreplace!), String, Base.Cartesian.LReplace{String},))
    precompile(Base.Test.do_test, (typeof(Base.Test.do_test), Base.Test.Threw, Expr,))
    precompile(Base.Dates.tryparsenext_core, ())
    precompile(Base.Cartesian.exprresolve_arith, (typeof(Base.Cartesian.exprresolve_arith), Expr,))
    precompile(Base.Test.do_broken_test, (typeof(Base.Test.do_broken_test), Base.Test.Threw, Expr,))
    precompile(Base.notify, (typeof(Base.notify), Base.Condition, Array{UInt8, 1}, Bool, Bool,))
    precompile(Base.show_unquoted_quote_expr, (typeof(Base.show_unquoted_quote_expr), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol, Int64, Int64,))
    precompile(Base.hashindex, (typeof(Base.hashindex), UInt8, Int64,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}},))
    precompile(Base.show_unquoted, (typeof(Base.show_unquoted), Base.GenericIOBuffer{Array{UInt8, 1}}, Expr, Int64, Int64,))
    precompile(Base.Base64.write, (typeof(Base.write), Base.Base64.Base64EncodePipe, UInt8,))
    precompile(Base.Libc.Type, (Type{Base.Libc.TmStruct}, Int64,))
    precompile(Base.Test.do_broken_test, (typeof(Base.Test.do_broken_test), Base.Test.Returned, Expr,))
    precompile(Base.Dates.format, (typeof(Base.Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dates.DatePart{Char(0x00000059)}, Base.Dates.DateTime,))
    precompile(Base.Broadcast._broadcast!, (typeof(Base.Broadcast._broadcast!), typeof(Base.:(==)), Base.BitArray{1}, Tuple{Tuple{Bool}, Tuple{Bool}}, Tuple{Tuple{Int64}, Tuple{Int64}}, Array{UInt8, 1}, Tuple{Base.UnitRange{UInt8}}, Base.Val{1}, Base.IteratorsMD.CartesianRange{1, Tuple{Base.OneTo{Int64}}},))
    precompile(Base.merge!, (typeof(Base.merge!), Base.Dict{String, String}, Base.Dict{String, String},))
    precompile(Base.setindex!, (typeof(Base.setindex!), Array{Base.Pair{Any, Any}, 1}, Base.Pair{Int64, Int64}, Int64,))
    precompile(Base.reset, (typeof(Base.reset), Base.IOStream,))
    precompile(Base.Cartesian.exprresolve, (typeof(Base.Cartesian.exprresolve), Expr,))
    precompile(Base.Dates.dayofweek, (typeof(Base.Dates.dayofweek), Base.Dates.DateTime,))
    precompile(Base.write, (typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{UInt8, 1},))
    precompile(Base.getindex, (typeof(Base.getindex), Base.Dict{Type{T} where T, Any}, DataType,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Tuple{Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}},))
    precompile(Base.Broadcast.broadcast_t, (typeof(Base.Broadcast.broadcast_t), Function, Type{Bool}, Tuple{Base.OneTo{Int64}}, Base.IteratorsMD.CartesianRange{1, Tuple{Base.OneTo{Int64}}}, Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Base.unique, (typeof(Base.unique), Array{Int64, 1},))
    precompile(Base.Broadcast.broadcast_t, (typeof(Base.Broadcast.broadcast_t), Function, Type{Bool}, Tuple{Base.OneTo{Int64}}, Base.IteratorsMD.CartesianRange{1, Tuple{Base.OneTo{Int64}}}, Array{UInt8, 1}, Base.UnitRange{UInt8},))
    precompile(Base.notify, (typeof(Base.notify), Base.Condition, Base.Test.Pass, Bool, Bool,))
    precompile(Base.notify, (typeof(Base.notify), Base.Condition, Int64, Bool, Bool,))
    precompile(Base._setindex!, (typeof(Base._setindex!), Base.Dict{Any, Any}, Int64, Int64, Int64,))
    precompile(Base.has_tight_type, (typeof(Base.has_tight_type), Base.Pair{Symbol, Float64},))
    precompile(Base.in, (typeof(Base.in), Base.Pair{String, String}, Base.Dict{String, String}, typeof(Base.:(==)),))
    precompile(Base.Test.do_test, (typeof(Base.Test.do_test), Base.Test.Threw, Symbol,))
    precompile(Base.Cartesian.exprresolve, (typeof(Base.Cartesian.exprresolve), Expr,))
    precompile(Base.copy!, (typeof(Base.copy!), Array{Any, 1}, Int64, Array{Base.Test.Fail, 1}, Int64, Int64,))
    precompile(Base.has_tight_type, (typeof(Base.has_tight_type), Base.Pair{Symbol, Bool},))
    precompile(Base.has_tight_type, (typeof(Base.has_tight_type), Base.Pair{Symbol, Int64},))
    precompile(Base._setindex!, (typeof(Base._setindex!), Base.Dict{String, Any}, Array{String, 1}, String, Int64,))
    precompile(Base.show_list, (typeof(Base.show_list), Base.GenericIOBuffer{Array{UInt8, 1}}, Tuple{Expr, Symbol}, Symbol, Int64, Int64, Bool,))
    precompile(Base.ht_keyindex, (typeof(Base.ht_keyindex), Base.Dict{Any, Any}, Symbol,))
    precompile(Base._setindex!, (typeof(Base._setindex!), Base.Dict{String, Any}, String, String, Int64,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base.Dates.month, (typeof(Base.Dates.month), Int64,))
    precompile(Base.haskey, (typeof(Base.haskey), Base.Dict{Any, Any}, Symbol,))
    precompile(Base.Type, (Type{Base.Dict{String, Any}},))
    precompile(Base.next, (typeof(Base.next), Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)}, Int64,))
    precompile(Base.print, (typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dates.DateTime,))
    precompile(Base.getindex, (typeof(Base.getindex), Base.Dict{Symbol, DataType}, Symbol,))
    precompile(Base.string, (typeof(Base.string), String, String, String, String,))
    precompile(Base.has_tight_type, (typeof(Base.has_tight_type), Base.Pair{Symbol, Void},))
    precompile(Base.Dates.character_codes, (typeof(Base.Dates.character_codes), SimpleVector,))
    precompile(Base.next, (typeof(Base.next), Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)}, Int64,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base.Dates.show, (typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dates.Delim{Char, 1},))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base._setindex!, (typeof(Base._setindex!), Base.Dict{String, Any}, Base.IOStream, String, Int64,))
    precompile(Base.Test.get_test_counts, (typeof(Base.Test.get_test_counts), Base.Test.DefaultTestSet,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base.close, (typeof(Base.close), Base.TCPServer,))
    precompile(Base.schedule, (typeof(Base.schedule), Task, Int64,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base.map_chr_ind, (typeof(Base.map_chr_ind), Base.SubString{String}, Int64, typeof(Base.last), typeof(Base.first),))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String},))
    precompile(Base.append_any, (typeof(Base.append_any), Tuple{Expr},))
    precompile(Base.Dates.hour, (typeof(Base.Dates.hour), Base.Dates.DateTime,))
    precompile(Base.as_kwargs, (typeof(Base.as_kwargs), Base.Dict{Symbol, Any},))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base.Dates.tryparsenext_internal, ())
    precompile(Base.Enums.enum_argument_error, (typeof(Base.Enums.enum_argument_error), Symbol, UInt8,))
    precompile(Base.Broadcast.broadcast_indices, (typeof(Base.Broadcast.broadcast_indices), Array{UInt8, 1}, Base.UnitRange{UInt8},))
    precompile(Base.Broadcast.broadcast_c, (typeof(Base.Broadcast.broadcast_c), Function, Type{Array{T, N} where N where T}, Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Base.Dates.day, (typeof(Base.Dates.day), Int64,))
    precompile(Base.error_color, (typeof(Base.error_color),))
    precompile(Base.print, (typeof(Base.print), Base.TTY, String, String,))
    precompile(Base.Test.pop_testset, (typeof(Base.Test.pop_testset),))
    precompile(Base.get, (typeof(Base.get), Base.Dict{String, Int64}, Base.SubString{String}, Int64,))
    precompile(Base.getindex, (typeof(Base.getindex), Base.Dict{Symbol, Function}, Symbol,))
    precompile(Base._include_dependency, (typeof(Base._include_dependency), String,))
    precompile(Base.Type, (Type{Base.Dict{String, String}}, Base.Pair{String, String}, Base.Pair{String, String},))
    precompile(Base.copy!, (typeof(Base.copy!), Array{Symbol, 1}, Base.Generator{Array{Type{T} where T, 1}, typeof(Base.Dates.genvar)},))
    precompile(Base.schedule, (typeof(Base.schedule), Task, Array{UInt8, 1},))
    precompile(Base.Test.do_test_throws, (typeof(Base.Test.do_test_throws), Base.Test.Threw, Any, Any,))
    precompile(Base.Broadcast.broadcast_c, (typeof(Base.Broadcast.broadcast_c), Function, Type{Array{T, N} where N where T}, Array{UInt8, 1}, Base.UnitRange{UInt8},))
    precompile(Base.map_chr_ind, (typeof(Base.map_chr_ind), Base.SubString{String}, Int64, typeof(Base.first), typeof(Base.last),))
    precompile(Base.copy!, (typeof(Base.copy!), Array{Int64, 1}, Array{Union{}, 1},))
    precompile(Base.collect, (typeof(Base.collect), Base.Generator{Array{UInt8, 1}, Type{Char}},))
    precompile(Base.copy!, (typeof(Base.copy!), Array{Symbol, 1}, Base.Generator{Array{Type{T} where T, 1}, typeof(Base.Dates.genvar)},))
    precompile(Base.schedule, (typeof(Base.schedule), Task, Base.Test.Pass,))
    precompile(Base.copy!, (typeof(Base.copy!), Array{Symbol, 1}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, typeof(Base.Dates.genvar)},))
    precompile(Base.Cartesian.lreplace!, (typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String},))
    precompile(Base.Test.print_counts, (typeof(Base.Test.print_counts), Base.Test.DefaultTestSet, Int64, Int64, Int64, Int64, Int64, Int64, Int64,))
    precompile(Base.vect, (typeof(Base.vect), Tuple{String, Array{UInt8, 1}, String},))
    precompile(Base.Cartesian.lreplace!, (typeof(Base.Cartesian.lreplace!), Expr, Base.Cartesian.LReplace{String},))
    precompile(Base.print, (typeof(Base.print), String, String,))
    precompile(Base.append!, (typeof(Base.append!), Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Base.Distributed.interrupt, (typeof(Base.Distributed.interrupt), Int64,))
    precompile(Base.Test.get_testset_depth, (typeof(Base.Test.get_testset_depth),))
    precompile(Base.Broadcast.broadcast_indices, (typeof(Base.Broadcast.broadcast_indices), Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Base.Dates.format, (typeof(Base.Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dates.DatePart{Char(0x0000006d)}, Base.Dates.DateTime,))
    precompile(Base.in, (typeof(Base.in), String, Tuple{String, String},))
    precompile(Base.Type, (Type{Base.Dict{K, V} where V where K}, Array{Base.Pair{Any, Any}, 1},))
    precompile(Base.in, (typeof(Base.in), String, Tuple{String, String, String},))
    precompile(Base.Test.do_test, (typeof(Base.Test.do_test), Base.Test.Returned, Expr,))
    precompile(Base.all, (typeof(Base.all), Base.BitArray{1},))
    precompile(Base.write, (typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Char, String,))
    precompile(Base.copy!, (typeof(Base.copy!), Base.IndexLinear, Array{Union{Base.Test.Error, Base.Test.Fail}, 1}, Base.IndexLinear, Array{Any, 1},))
    precompile(Base.Dates.minute, (typeof(Base.Dates.minute), Base.Dates.DateTime,))
    precompile(Base.getindex, (typeof(Base.getindex), Type{UInt8}, Int64, Int64, Int64,))
    precompile(Base.Dates.second, (typeof(Base.Dates.second), Base.Dates.DateTime,))
    precompile(Base.Broadcast._broadcast!, ())
    precompile(Base.reset, (typeof(Base.reset), Base.GenericIOBuffer{Array{UInt8, 1}},))
    precompile(Base.Serializer.serialize, (typeof(Base.Serializer.serialize), Base.Pipe, Expr,))
    precompile(Base.write, (typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Array{UInt8, 1}, String,))
    precompile(Base.first, (typeof(Base.first), SimpleVector,))
    precompile(Base.ht_keyindex2, (typeof(Base.ht_keyindex2), Base.Dict{String, Any}, String,))
    precompile(Base.Test.push_testset, (typeof(Base.Test.push_testset), Base.Test.DefaultTestSet,))
    precompile(Base.Dates.year, (typeof(Base.Dates.year), Int64,))
    precompile(Base.write, (typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Char, Char, Char, UInt8,))
    precompile(Base.uvfinalize, (typeof(Base.uvfinalize), Base.TCPServer,))
    precompile(Base.getindex, (typeof(Base.getindex), Type{UInt8}, Char, Char, Char, UInt8,))
    precompile(Base.Type, (Type{Base.Rational{Int64}}, Int64, Int64,))
    precompile(Base.warn_color, (typeof(Base.warn_color),))
    precompile(Base.include_relative, (typeof(Base.include_relative), Module, String,))
    precompile(Base.push!, (typeof(Base.push!), Array{UInt8, 1}, UInt8,))
    precompile(Base.Type, (Type{Base.Dict{Any, Any}}, Array{Base.Pair{Any, Any}, 1},))
    precompile(Base.read, (typeof(Base.read), Base.GenericIOBuffer{Array{UInt8, 1}}, Int64,))
    precompile(Base.Test.get_testset, (typeof(Base.Test.get_testset),))
    precompile(Base.pop!, (typeof(Base.pop!), Array{Base.Test.AbstractTestSet, 1},))
    precompile(Base.alloc_buf_hook, (typeof(Base.alloc_buf_hook), Base.TCPSocket, UInt64,))
    precompile(Base.print, (typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, String, Int32,))
    precompile(Base.Dates.now, (typeof(Base.Dates.now),))
    precompile(Base.task_local_storage, (typeof(Base.task_local_storage), Symbol, Tuple{Array{Any, 1}, Tuple{}},))
    precompile(Base.getindex, (typeof(Base.getindex), Type{UInt8}, UInt8, UInt8, UInt8, UInt8,))
    precompile(Base.tryparse, (typeof(Base.tryparse), Type{Int64}, Base.SubString{String},))
    precompile(Base.getindex, (typeof(Base.getindex), Type{UInt8}, Char, Char, Char, Char,))
    precompile(Base.push!, (typeof(Base.push!), Array{Base.Test.AbstractTestSet, 1}, Base.Test.DefaultTestSet,))
    precompile(Base.isopen, (typeof(Base.isopen), Base.TCPServer,))
    precompile(Base.mark, (typeof(Base.mark), Base.IOStream,))
    precompile(Base.show, (typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Float64},))
    precompile(Base.indexed_next, (typeof(Base.indexed_next), Tuple{Symbol, Base.IOStream}, Int64, Int64,))
    precompile(Base.indexed_next, (typeof(Base.indexed_next), Tuple{Symbol, Bool}, Int64, Int64,))
    precompile(Base.task_local_storage, (typeof(Base.task_local_storage), Symbol, Tuple{},))
    precompile(Base.readbytes!, (typeof(Base.readbytes!), Base.TCPSocket, Array{UInt8, 1}, UInt64,))
    precompile(Base.indexed_next, (typeof(Base.indexed_next), Tuple{Symbol, Base.GenericIOBuffer{Array{UInt8, 1}}}, Int64, Int64,))
    precompile(Base.string, (typeof(Base.string), String, Base.IPv4,))
    precompile(Base.indexed_next, (typeof(Base.indexed_next), Tuple{Symbol, Array{UInt8, 1}}, Int64, Int64,))
    precompile(Base.Test.record, (typeof(Base.Test.record), Base.Test.DefaultTestSet, Base.Test.Broken,))
    precompile(Base.getindex, (typeof(Base.getindex), Array{Tuple{Any, Any}, 1}, Int64,))
    precompile(Base.Type, (Type{Symbol}, Symbol, Symbol,))
    precompile(Base.Broadcast._broadcast!, (typeof(Base.Broadcast._broadcast!), typeof(Base.:(==)), Base.BitArray{1}, Tuple{Tuple{Bool}, Tuple{Bool}}, Tuple{Tuple{Int64}, Tuple{Int64}}, Array{UInt8, 1}, Tuple{Array{UInt8, 1}}, Base.Val{1}, Base.IteratorsMD.CartesianRange{1, Tuple{Base.OneTo{Int64}}},))
    precompile(Base.repl_color, (typeof(Base.repl_color), String, Symbol,))
    precompile(Base.Dates.genvar, (typeof(Base.Dates.genvar), DataType,))
    precompile(Base.hex, (typeof(Base.hex), Int64,))
    precompile(Base.Test.parse_testset_args, (typeof(Base.Test.parse_testset_args), Tuple{String},))
    precompile(Base.convert, (typeof(Base.convert), Type{Base.Dates.DateTime}, Base.Dates.DateTime,))
    precompile(Base.Test.get_test_result, (typeof(Base.Test.get_test_result), Symbol,))
    precompile(Base.Type, (Type{Symbol}, Symbol, Int64,))
    precompile(Base.Sort.sort!, (typeof(Base.sort!), Array{Int64, 1}, Base.Sort.QuickSortAlg, Base.Order.ForwardOrdering,))
    precompile(Base.rpad, (typeof(Base.rpad), Base.Dates.DateTime, Int64, Char,))
    precompile(Base.write, (typeof(Base.write), Base.GenericIOBuffer{Array{UInt8, 1}}, Char, Char, Char, Char,))
    precompile(Base._uv_hook_close, (typeof(Base._uv_hook_close), Base.TCPServer,))
    precompile(Base.Type, (Type{Base.Pair{A, B} where B where A}, Symbol, Float64,))
    precompile(Base.Iterators.zip, (typeof(Base.Iterators.zip), Array{Symbol, 1}, Tuple{Int64, Int64, Int64, Int64, Int64, Int64, Int64},))
    precompile(Base.indexed_next, (typeof(Base.indexed_next), Tuple{Symbol, Base.Dict{String, Any}}, Int64, Int64,))
    precompile(Base.string, (typeof(Base.string), Expr,))
    precompile(Base.setindex!, (typeof(Base.setindex!), Array{Base.Pair{Any, Any}, 1}, Base.Pair{String, String}, Int64,))
    precompile(Base.info_color, (typeof(Base.info_color),))
    precompile(Base.Dates.format, ())
    precompile(Base.Broadcast._broadcast_eltype, (typeof(Base.Broadcast._broadcast_eltype), Function, Array{UInt8, 1}, Base.UnitRange{UInt8},))
    precompile(Base.println, (typeof(Base.println), String, String,))
    precompile(Base.setindex!, (typeof(Base.setindex!), Base.Dict{String, Any}, Base.IOStream, Base.IOStream,))
    precompile(Base.Broadcast.maptoTuple, (typeof(Base.Broadcast.maptoTuple), typeof(Base.Broadcast._broadcast_getindex_eltype), Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Base.isempty, (typeof(Base.isempty), Array{Base.Test.AbstractTestSet, 1},))
    precompile(Base.Broadcast._broadcast_eltype, (typeof(Base.Broadcast._broadcast_eltype), Function, Array{UInt8, 1}, Array{UInt8, 1},))
    precompile(Base.indexed_next, (typeof(Base.indexed_next), Base.Pair{String, Array{String, 1}}, Int64, Int64,))
    precompile(Base.print, (typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Bool},))
    precompile(Base.string, (typeof(Base.string), String, Base.IPv4, String,))
    precompile(Base.setindex!, (typeof(Base.setindex!), Base.Dict{String, Any}, Array{String, 1}, Array{String, 1},))
    precompile(Base.string, (typeof(Base.string), String, Base.Dates.Delim{Char, 1}, String, Int64,))
    precompile(Base.copy!, (typeof(Base.copy!), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)},))
    precompile(Base.string, (typeof(Base.string), String, Base.IPv6,))
    precompile(Base.string, (typeof(Base.string), String, Base.IPv6, String,))
    precompile(Base.Type, (Type{Base.Pair{A, B} where B where A}, Symbol, Void,))
    precompile(Base.Type, (Type{Base.Generator{I, F} where F where I}, typeof(Base.Dates.genvar), Array{Type{T} where T, 1},))
    precompile(Base.print, (typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Void},))
    precompile(Base.print_with_color, (typeof(Base.print_with_color), Symbol, String, String,))
    precompile(Base.indexed_next, (typeof(Base.indexed_next), Tuple{Symbol, Base.Dict{String, String}}, Int64, Int64,))
    precompile(Base.println, (typeof(Base.println), Base.TTY,))
    precompile(Base.copy!, (typeof(Base.copy!), Array{Any, 1}, Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)},))
    precompile(Base.indexed_next, (typeof(Base.indexed_next), Tuple{Symbol, Base.Dates.DateTime}, Int64, Int64,))
    precompile(Base.remove_linenums!, (typeof(Base.remove_linenums!), UInt8,))
    precompile(Base.endof, (typeof(Base.endof), Array{Base.Test.AbstractTestSet, 1},))
    precompile(Base.Broadcast.maptoTuple, (typeof(Base.Broadcast.maptoTuple), typeof(Base.Broadcast._broadcast_getindex_eltype), Array{UInt8, 1}, Base.UnitRange{UInt8},))
    precompile(Base.Type, (Type{Base.Dict{String, Any}}, Tuple{Base.Pair{String, String}, Base.Pair{String, Array{String, 1}}},))
    precompile(Base.show, (typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Int64},))
    precompile(Base.Test.Type, (Type{Base.Test.DefaultTestSet}, String,))
    precompile(Base.Test.test_expr!, (typeof(Base.Test.test_expr!), String, Symbol,))
    precompile(Base.Type, (Type{Base.Dict{String, Any}}, Tuple{Base.Pair{String, String}, Base.Pair{String, Base.IOStream}},))
    precompile(Base.length, (typeof(Base.length), Array{Base.Test.AbstractTestSet, 1},))
    precompile(Base.Test.record, (typeof(Base.Test.record), Base.Test.DefaultTestSet, Base.Test.DefaultTestSet,))
    precompile(Base.Base64.base64encode, (typeof(Base.Base64.base64encode), Function, String,))
    precompile(Base.spawn, (typeof(Base.spawn), Base.CmdRedirect, Tuple{Base.Pipe, Base.TTY, Base.TTY},))
    precompile(Base.Type, (Type{Base.Generator{I, F} where F where I}, typeof(Base.Dates.genvar), Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType},))
    precompile(Base.remove_linenums!, (typeof(Base.remove_linenums!), QuoteNode,))
    precompile(Base.print_with_color, (typeof(Base.print_with_color), Symbol, String,))
    precompile(Base.copy_exprs, (typeof(Base.copy_exprs), Expr,))
    precompile(Base.copy_exprs, (typeof(Base.copy_exprs), Expr,))
    precompile(Base.read, (typeof(Base.read), Base.IOStream, Int64,))
    precompile(Base.Dates.format, (typeof(Base.Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dates.DatePart{Char(0x00000075)}, Base.Dates.DateTime, Base.Dates.DateLocale,))
    precompile(Base.getindex, (typeof(Base.getindex), Array{Base.Test.AbstractTestSet, 1}, Int64,))
    precompile(Base.Test.filter_errors, (typeof(Base.Test.filter_errors), Base.Test.DefaultTestSet,))
    precompile(Base.mark, (typeof(Base.mark), Base.GenericIOBuffer{Array{UInt8, 1}},))
    precompile(Base.print, (typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dates.Delim{Char, 1},))
    precompile(Base.Cartesian._nexprs, (typeof(Base.Cartesian._nexprs), Int64, Expr,))
    precompile(Base.setindex!, (typeof(Base.setindex!), Base.Dict{String, Any}, String, Array{String, 1},))
    precompile(Base.convert, (typeof(Base.convert), Type{Union{Void, IO}}, Base.TTY,))
    precompile(Base.setindex!, (typeof(Base.setindex!), Base.Dict{String, Any}, String, Base.IOStream,))
    precompile(Base.Test.finish, (typeof(Base.Test.finish), Base.Test.DefaultTestSet,))
    precompile(Base.Test.record, (typeof(Base.Test.record), Base.Test.DefaultTestSet, Base.Test.Pass,))
    precompile(Base.print, (typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Int64},))
    precompile(Base.Cartesian.lreplace!, (typeof(Base.Cartesian.lreplace!), Symbol, Base.Cartesian.LReplace{String},))
    precompile(Base.print, (typeof(Base.print), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Pair{Symbol, Float64},))
    precompile(Base.Cartesian._nexprs, (typeof(Base.Cartesian._nexprs), Int64, Expr,))
    precompile(Base.Dates.format, (typeof(Base.Dates.format), Base.GenericIOBuffer{Array{UInt8, 1}}, Base.Dates.DatePart{Char(0x00000064)}, Base.Dates.DateTime,))
    precompile(Base.Cartesian.lreplace!, (typeof(Base.Cartesian.lreplace!), Symbol, Base.Cartesian.LReplace{String},))
    precompile(Base.Cartesian._ncall, (typeof(Base.Cartesian._ncall), Int64, Symbol, Symbol,))
    precompile(Base.copy!, (typeof(Base.copy!), Array{Base.Pair{Any, Any}, 1}, Tuple{Base.Pair{String, String}, Base.Pair{Int64, Int64}},))
    precompile(Base.Test.record, (typeof(Base.Test.record), Base.Test.FallbackTestSet, Base.Test.Pass,))
    precompile(Base.remove_linenums!, (typeof(Base.remove_linenums!), String,))
    precompile(Base.connect, (typeof(Base.connect), Base.IPv4, Int64,))
    precompile(Base.copy, (typeof(Base.copy), Expr,))
    precompile(Base.write, (typeof(Base.write), Base.Base64.Base64EncodePipe, String,))
    precompile(Base.copy, (typeof(Base.copy), Expr,))
    precompile(Base.collect, (typeof(Base.collect), Type{Symbol}, Base.Generator{Array{Type{T} where T, 1}, typeof(Base.Dates.genvar)},))
    precompile(Base.collect, (typeof(Base.collect), Type{Symbol}, Base.Generator{Array{Type{T} where T, 1}, typeof(Base.Dates.genvar)},))
    precompile(Base.collect, (typeof(Base.collect), Type{Symbol}, Base.Generator{Tuple{DataType, DataType, DataType, DataType, DataType, DataType, DataType}, typeof(Base.Dates.genvar)},))
    precompile(Base.append!, (typeof(Base.append!), Array{Any, 1}, Array{Base.Test.Error, 1},))
    precompile(Base.setindex!, (typeof(Base.setindex!), Base.Dict{String, Any}, Array{String, 1}, String,))
    precompile(Base.append!, (typeof(Base.append!), Array{Any, 1}, Array{Base.Test.Fail, 1},))
    precompile(Base.setindex!, (typeof(Base.setindex!), Base.Dict{Any, Any}, Int64, Int64,))
    precompile(Base.setindex!, (typeof(Base.setindex!), Base.Dict{String, Any}, String, String,))
    precompile(Base.show, (typeof(Base.show), Base.GenericIOBuffer{Array{UInt8, 1}}, Symbol,))
    precompile(Base._collect, (typeof(Base._collect), Type{Any}, Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)}, Base.HasShape,))
    precompile(Base._collect, (typeof(Base._collect), Type{Any}, Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)}, Base.HasShape,))
    precompile(Base.setindex!, (typeof(Base.setindex!), Base.Dict{String, Any}, Base.IOStream, String,))
    precompile(Base.show, (typeof(Base.show), Base.IOContext{Base.GenericIOBuffer{Array{UInt8, 1}}}, Symbol,))
    precompile(Base.collect, (typeof(Base.collect), Type{Any}, Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)},))
    precompile(Base.Cartesian.lreplace, (typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64,))
    precompile(Base.Cartesian.lreplace, (typeof(Base.Cartesian.lreplace), Expr, Symbol, Int64,))
    precompile(Base.collect, (typeof(Base.collect), Type{Any}, Base.Generator{Array{Any, 1}, typeof(Base.copy_exprs)},))
    precompile(Base.copy_exprargs, (typeof(Base.copy_exprargs), Array{Any, 1},))
    precompile(Base.copy_exprargs, (typeof(Base.copy_exprargs), Array{Any, 1},))
end
