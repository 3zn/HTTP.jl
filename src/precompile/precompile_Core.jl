function _precompile_()
    ccall(:jl_generating_output, Cint, ()) == 1 || return nothing
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SlotNumber, QuoteNode, SlotNumber, QuoteNode, SlotNumber, QuoteNode, SlotNumber, QuoteNode, SlotNumber,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, SlotNumber, String, SlotNumber, String, SlotNumber,))
    precompile(Core.Inference.Type, (Type{Core.Inference.Pair{A, B} where B where A}, SSAValue, Type{UInt8},))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, Expr, GlobalRef, Tuple{UInt8, Bool},))
    precompile(Core.Inference.getindex, (typeof(Core.Inference.getindex), Type{Any}, Any, GlobalRef, Expr, Expr,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SlotNumber, GlobalRef, Int64,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SSAValue, QuoteNode, SSAValue, QuoteNode, SSAValue, QuoteNode, SSAValue, QuoteNode, SSAValue,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, SlotNumber, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, SSAValue, Expr,))
    precompile(Core.Inference.getindex, (typeof(Core.Inference.getindex), Type{Any}, Any, SlotNumber, GlobalRef, QuoteNode,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, String, String, String, String, String, String, String, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, String, String, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, String, String, String, String, String, String, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, SSAValue, String, SlotNumber, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, SlotNumber, Expr, Expr, Expr, Expr, Expr, Expr, Expr,))
    precompile(Core.Inference.Type, (Type{Core.Inference.Pair{A, B} where B where A}, SSAValue, Array{Tuple{Symbol, Integer}, 1},))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, Int64, QuoteNode, Int64, QuoteNode, SSAValue, QuoteNode, SSAValue,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, Expr, Tuple{Int64, Int64},))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SlotNumber, QuoteNode, SlotNumber, QuoteNode, SSAValue,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, SlotNumber, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr,))
    precompile(Core.Type, (Type{Expr}, Any, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol, Symbol,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, SlotNumber, SlotNumber, GlobalRef, GlobalRef,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SlotNumber, GlobalRef, SSAValue,))
    precompile(Core.Inference.getindex, (typeof(Core.Inference.getindex), Tuple{Int64, Bool, Float64, Float64, Void, Int64, Bool, Bool, Int64, Bool, Bool}, Int64,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SlotNumber, GlobalRef, GlobalRef,))
    precompile(Core.Inference.getindex, (typeof(Core.Inference.getindex), Tuple{Int64, Tuple{Int64, Tuple{Int64, Tuple{}}}}, Int64,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, SlotNumber, SlotNumber, SlotNumber, Expr, Expr,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, UInt8, UInt8, UInt8, UInt8, UInt8, UInt8,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, Expr, String, SlotNumber, String, Expr, String,))
    precompile(Core.Inference.Type, (Type{Core.Inference.Pair{A, B} where B where A}, SlotNumber, Tuple{Bool, Bool},))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, Bool, QuoteNode, Bool, QuoteNode, Bool,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, Expr, String, GlobalRef,))
    precompile(Core.Type, (Type{Expr}, Any, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SlotNumber, QuoteNode, SSAValue,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, Expr, String, String, String,))
    precompile(Core.Inference.Type, (Type{Core.Inference.Pair{A, B} where B where A}, SSAValue, Tuple{Int64, Bool, Float64, Float64, Void, Int64, Bool, Bool, Int64, Bool, Bool},))
    precompile(Core.Inference.Type, (Type{Core.Inference.Pair{A, B} where B where A}, SSAValue, Tuple{Tuple{}, Tuple{}, Tuple{}},))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SSAValue, GlobalRef, SlotNumber,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, String, QuoteNode, String, QuoteNode, String, QuoteNode, Int64, QuoteNode, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, QuoteNode, SlotNumber, Expr,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, SSAValue, String, SSAValue, String, SlotNumber, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SlotNumber, GlobalRef, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, String, QuoteNode, SSAValue,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, SSAValue, String, SlotNumber,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, Expr, QuoteNode, Int64,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, TypedSlot, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, Type{T} where T, String, Expr, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, String, QuoteNode, SSAValue, QuoteNode, Bool,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SlotNumber, QuoteNode, SlotNumber, QuoteNode, Expr,))
    precompile(Core.Inference.Type, (Type{Core.Inference.Pair{A, B} where B where A}, SSAValue, Tuple{Int64, Int64},))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, String, GlobalRef, Expr,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, String, QuoteNode, String, QuoteNode, Bool, QuoteNode, SSAValue,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, SSAValue, String, SlotNumber, String, Expr, String, Expr, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SSAValue, GlobalRef, TypedSlot,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, GlobalRef, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, TypedSlot,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, SlotNumber, Expr,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, String, QuoteNode, Int64,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, SSAValue, String, Expr,))
    precompile(Core.Type, (Type{Expr}, Any, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr, Expr,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, Type{T} where T, GlobalRef, GlobalRef,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, String, String, String, String, String, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, Expr, GlobalRef, GlobalRef,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SSAValue, GlobalRef, Expr,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, String, QuoteNode, Bool,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, Expr, GlobalRef, Expr,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, GlobalRef, GlobalRef,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, UInt8, UInt8, UInt8, UInt8, UInt8,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, Expr, String, SlotNumber, String, SlotNumber, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, Expr, GlobalRef, Int64,))
    precompile(Core.Inference.Type, (Type{Core.Inference.Pair{A, B} where B where A}, SlotNumber, Type{Tuple{Any, Any}},))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SlotNumber, GlobalRef, Expr,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, UInt8, UInt8, UInt8, UInt8,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, Expr, GlobalRef, TypedSlot,))
    precompile(Core.Type, (Type{Expr}, Any, SSAValue, Tuple{UInt8, Bool},))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, Expr, GlobalRef, SlotNumber,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, String, QuoteNode, String, QuoteNode, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, Expr, GlobalRef, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SSAValue, QuoteNode, Int64,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, UInt8, UInt8, UInt8,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, Expr, GlobalRef, UInt8,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, SlotNumber, SlotNumber, SlotNumber, GlobalRef,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, Expr, GlobalRef, GlobalRef,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SSAValue, GlobalRef, Int64,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, Expr, GlobalRef, GlobalRef,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, TypedSlot, QuoteNode, Int64,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue, SSAValue,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, SSAValue, Expr, Expr, Expr,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, SSAValue, GlobalRef, SSAValue,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, Bool, GlobalRef, Expr,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, UInt8, UInt8,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, QuoteNode, String, QuoteNode, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, UInt8,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String,))
    precompile(Core.Type, (Type{Expr}, Any, GlobalRef, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String, String,))
end
